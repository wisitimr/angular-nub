{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, lastValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(router, http) {\n      this.router = router;\n      this.http = http;\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    login(username, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        var user = yield lastValueFrom(this.http.post(`${environment.apiUrl}/api/auth/login`, {\n          username,\n          password\n        }));\n        return user;\n      });\n    }\n\n    logout() {\n      // remove user from local storage and set current user to null\n      localStorage.removeItem('user');\n      this.userSubject.next(null);\n      this.router.navigate(['/auth/login']);\n    }\n\n    clear() {\n      localStorage.removeItem('user');\n      this.userSubject.next(null);\n    }\n\n    register(user) {\n      return this.http.post(`${environment.apiUrl}/user/register`, user);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}