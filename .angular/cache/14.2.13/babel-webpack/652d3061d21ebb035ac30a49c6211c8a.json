{"ast":null,"code":"import { trigger, transition, style, animate, query, sequence, stagger } from '@angular/animations';\nimport { Component, Injectable } from '@angular/core';\nimport { NavigationEnd } from '@angular/router';\nimport { filter, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let SidenavComponent = /*#__PURE__*/(() => {\n  class SidenavComponent {\n    constructor(router, titleService, authService) {\n      this.router = router;\n      this.titleService = titleService;\n      this.authService = authService;\n      this.menuData = [{\n        name: 'Dashboard',\n        route: 'dashboard'\n      }, {\n        name: 'Setting',\n        children: [{\n          name: 'Account',\n          route: 'account'\n        }, {\n          name: 'Supplier',\n          route: 'supplier'\n        }, {\n          name: 'Customer',\n          route: 'customer'\n        }, {\n          name: 'Product',\n          route: 'product'\n        }, {\n          name: 'Material',\n          route: 'material'\n        }]\n      }, {\n        name: 'User',\n        route: 'user',\n        role: \"admin\"\n      }, {\n        name: 'Log Out',\n        route: 'auth/logout'\n      }];\n      this.color = [\"#8dc63f\", \"#32ceb0\", \"#5bafef\", \"#ff97c9\", \"#cde07a\", \"#ff9f50\", \"#a9a9f7\", \"#ff807d\"];\n      this.index = 0;\n      this.controller = {};\n      this.selectedNode = undefined;\n    }\n\n    ngOnInit() {\n      var _a, _b, _c, _d;\n\n      this.authService.user.subscribe(x => this.user = x);\n\n      if (this.user) {\n        this.profileText = ((_b = (_a = this.user.firstName) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.toUpperCase()) + ((_d = (_c = this.user.lastName) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.toUpperCase());\n\n        if (this.user.company && this.user.company.name) {\n          if (this.user.company.name.length > 30) {\n            this.companyText = this.user.company.name.slice(0, 30) + '...';\n          } else {\n            this.companyText = this.user.company.name;\n          }\n        }\n      }\n\n      this.mapMenu();\n      this.setTitle();\n    }\n\n    ngOnChanges() {\n      this.mapMenu();\n    }\n\n    mapMenu() {\n      var _a;\n\n      this.menu = (_a = this.menuData) === null || _a === void 0 ? void 0 : _a.map(x => this.toNode(x));\n    }\n\n    ngDoCheck() {\n      if (!this.selectedNode) {\n        let data = this.findMenuItemByRoute(this.menu, this.router.url);\n        this.selectedNode = data;\n      }\n\n      if (this.selectedNode && !this.highlightedParent) {\n        Object.keys(this.controller).forEach(key => {\n          this.controller[key].isActive = false;\n        });\n        const parents = this.getAllParentIndex(this.selectedNode.parentIndex, this.controller);\n        parents.forEach(key => {\n          if (this.controller[key]) {\n            this.controller[key].isActive = true;\n          }\n        });\n        this.setTitleByCondition(this.selectedNode.name);\n      }\n    }\n\n    setTitle() {\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd), map(() => {\n        const node = this.findMenuItemByRoute(this.menu, this.router.url);\n        let title = (node === null || node === void 0 ? void 0 : node.name) || 'FinDigitalService';\n\n        if (title) {\n          return title;\n        }\n      })).subscribe(title => {\n        this.setTitleByCondition(title);\n      });\n    }\n\n    setTitleByCondition(title) {\n      let msg;\n\n      if (title) {\n        if (this.router.url.indexOf('create') != -1) {\n          msg = `Add ${title}`;\n        } else if (this.router.url.indexOf('edit') != -1) {\n          msg = `Edit ${title}`;\n        } else {\n          msg = `${title}`;\n        }\n\n        this.titleService.setTitle(`${msg} - FinDigitalService`);\n      }\n    }\n\n    toNode(x, parentColor, parentIndex) {\n      var _a;\n\n      const y = Object.assign({}, x);\n      y.index = ++this.index;\n      y.color = parentColor || this.color[this.index % 7];\n\n      if (parentIndex) {\n        y.parentIndex = parentIndex;\n      }\n\n      for (let n = 0; n < ((_a = y === null || y === void 0 ? void 0 : y.children) === null || _a === void 0 ? void 0 : _a.length); n++) {\n        this.controller[y.index] = {\n          parentIndex: parentIndex,\n          isExpand: false,\n          isActive: false\n        };\n        y.children[n] = this.toNode(y.children[n], y.color, y.index);\n      }\n\n      return y;\n    }\n\n    toggleVisible(node) {\n      var _a;\n\n      if ((_a = node === null || node === void 0 ? void 0 : node.children) === null || _a === void 0 ? void 0 : _a.length) {\n        if (this.controller[node.index].isExpand) {\n          this.controller[node.index].isExpand = false;\n        } else {\n          this.controller[node.index].isExpand = true;\n        }\n      }\n    }\n\n    selectNode(node) {\n      this.selectedNode = node;\n\n      for (let i = 0; Object.keys(this.controller).length > i; i++) {\n        let key = Object.keys(this.controller)[i];\n        let parents = this.menu.find(x => x.index == key);\n        let isChildren = this.findIndexInChildren(parents, node.index);\n\n        if (!isChildren) {\n          this.controller[key].isExpand = false;\n          this.controller[key].isActive = false;\n        } else {\n          break;\n        }\n      }\n\n      Object.keys(this.controller).forEach(key => {\n        this.controller[key].isActive = false;\n      });\n      const parents = this.getAllParentIndex(node.parentIndex, this.controller);\n      parents.forEach(key => {\n        if (this.controller[key]) {\n          this.controller[key].isActive = true;\n        }\n      });\n    }\n\n    getAllParentIndex(index, data) {\n      const parents = [];\n      parents.push(index);\n\n      function findParent(currIndex, data) {\n        const element = data[currIndex];\n\n        if (element && element.parentIndex !== undefined) {\n          parents.push(element.parentIndex);\n          findParent(element.parentIndex, data);\n        }\n      }\n\n      findParent(index, data);\n      return parents;\n    }\n\n    isSelected(node) {\n      this.selectedNode = null;\n      let isSelected = node === this.selectedNode || this.router.url.indexOf(node === null || node === void 0 ? void 0 : node.route) !== -1;\n\n      if (isSelected) {\n        this.selectedNode = node;\n      }\n\n      return isSelected;\n    }\n\n    findIndexInChildren(node, targetIndex) {\n      if ((node === null || node === void 0 ? void 0 : node.index) == targetIndex) {\n        return true;\n      }\n\n      if (node === null || node === void 0 ? void 0 : node.children) {\n        for (const childNode of node.children) {\n          let isChildren = this.findIndexInChildren(childNode, targetIndex);\n\n          if (isChildren) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    highlightParent(node) {\n      this.highlightedParent = node;\n      const parents = this.getAllParentIndex(node.parentIndex, this.controller);\n      parents.forEach(key => {\n        if (this.controller[key]) {\n          this.controller[key].isActive = true;\n        }\n      });\n    }\n\n    resetParentHighlight() {\n      Object.keys(this.controller).forEach(key => {\n        this.controller[key].isActive = false;\n      });\n      this.highlightedParent = undefined;\n    }\n\n    findMenuItemByRoute(menu, targetRoute) {\n      for (const item of menu) {\n        if (targetRoute.indexOf(item.route) !== -1) {\n          return item;\n        }\n\n        if (item.children) {\n          const foundInChildren = this.findMenuItemByRoute(item.children, targetRoute);\n\n          if (foundInChildren) {\n            return foundInChildren;\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    logout() {\n      this.authService.logout();\n    }\n\n  }\n\n  SidenavComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SidenavComponent,\n    factory: SidenavComponent.ɵfac,\n    providedIn: 'root'\n  });\n  return SidenavComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}