{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BehaviorSubject, lastValueFrom } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"../auth/auth.service\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(router, http, authService) {\n      this.router = router;\n      this.http = http;\n      this.authService = authService;\n      this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n      this.user = this.userSubject.asObservable();\n    }\n\n    get userValue() {\n      return this.userSubject.value;\n    }\n\n    getAll() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield lastValueFrom(this.http.get(`${environment.apiUrl}/api/user`));\n\n        if (res && res.data) {\n          return res.data;\n        } else {\n          return [];\n        }\n      });\n    }\n\n    getById(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield lastValueFrom(this.http.get(`${environment.apiUrl}/api/user/${id}`));\n\n        if (res && res.data) {\n          return res.data;\n        } else {\n          return null;\n        }\n      });\n    }\n\n    update(id, params) {\n      return this.http.put(`${environment.apiUrl}/user/${id}`, params).pipe(map(x => {\n        var _a; // update stored user if the logged in user updated their own record\n\n\n        if (id == ((_a = this.userValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          // update local storage\n          const user = Object.assign(Object.assign({}, this.userValue), params);\n          localStorage.setItem('user', JSON.stringify(user)); // publish updated user to subscribers\n\n          this.userSubject.next(user);\n        }\n\n        return x;\n      }));\n    }\n\n    delete(id) {\n      return this.http.delete(`${environment.apiUrl}/user/${id}`).pipe(map(x => {\n        var _a; // auto logout if the logged in user deleted their own record\n\n\n        if (id == ((_a = this.userValue) === null || _a === void 0 ? void 0 : _a.id)) {\n          this.authService.logout();\n        }\n\n        return x;\n      }));\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.AuthService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}