{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { lastValueFrom } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MaterialService = /*#__PURE__*/(() => {\n  class MaterialService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getAll() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield lastValueFrom(this.http.get(`${environment.apiUrl}/api/material`));\n\n        if (res && res.data) {\n          return res.data;\n        } else {\n          return [];\n        }\n      });\n    }\n\n    getById(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const res = yield lastValueFrom(this.http.get(`${environment.apiUrl}/api/material/${id}`));\n\n        if (res && res.data) {\n          return res.data;\n        } else {\n          return null;\n        }\n      });\n    }\n\n    update(id, params) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield lastValueFrom(this.http.put(`${environment.apiUrl}/materials/${id}`, params));\n      });\n    }\n\n    add(params) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield lastValueFrom(this.http.post(`${environment.apiUrl}/materials`, params));\n      });\n    }\n\n    delete(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield lastValueFrom(this.http.delete(`${environment.apiUrl}/material/${id}`));\n      });\n    }\n\n  }\n\n  MaterialService.ɵfac = function MaterialService_Factory(t) {\n    return new (t || MaterialService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MaterialService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MaterialService,\n    factory: MaterialService.ɵfac,\n    providedIn: 'root'\n  });\n  return MaterialService;\n})();","map":null,"metadata":{},"sourceType":"module"}