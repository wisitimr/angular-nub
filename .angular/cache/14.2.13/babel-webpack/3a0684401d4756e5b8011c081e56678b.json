{"ast":null,"code":"import { animation, style, animate, trigger, transition, useAnimation } from '@angular/animations';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Input, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport { ObjectUtils, ZIndexUtils } from 'primeng/utils';\nconst _c0 = [\"overlay\"];\nconst _c1 = [\"content\"];\n\nfunction Overlay_div_0_div_2_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c2 = function (a0, a1, a2) {\n  return {\n    showTransitionParams: a0,\n    hideTransitionParams: a1,\n    transform: a2\n  };\n};\n\nconst _c3 = function (a1) {\n  return {\n    value: \"visible\",\n    params: a1\n  };\n};\n\nconst _c4 = function (a0) {\n  return {\n    mode: a0\n  };\n};\n\nconst _c5 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction Overlay_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1, 3);\n    i0.ɵɵlistener(\"click\", function Overlay_div_0_div_2_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.onOverlayContentClick($event));\n    })(\"@overlayContentAnimation.start\", function Overlay_div_0_div_2_Template_div_animation_overlayContentAnimation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.onOverlayContentAnimationStart($event));\n    })(\"@overlayContentAnimation.done\", function Overlay_div_0_div_2_Template_div_animation_overlayContentAnimation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.onOverlayContentAnimationDone($event));\n    });\n    i0.ɵɵprojection(2);\n    i0.ɵɵtemplate(3, Overlay_div_0_div_2_ng_container_3_Template, 1, 0, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.contentStyleClass);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.contentStyle)(\"ngClass\", \"p-overlay-content\")(\"@overlayContentAnimation\", i0.ɵɵpureFunction1(11, _c3, i0.ɵɵpureFunction3(7, _c2, ctx_r2.showTransitionOptions, ctx_r2.hideTransitionOptions, ctx_r2.transformOptions[ctx_r2.modal ? ctx_r2.overlayResponsiveDirection : \"default\"])));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.contentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(15, _c5, i0.ɵɵpureFunction1(13, _c4, ctx_r2.overlayMode)));\n  }\n}\n\nconst _c6 = function (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {\n  return {\n    \"p-overlay p-component\": true,\n    \"p-overlay-modal p-component-overlay p-component-overlay-enter\": a1,\n    \"p-overlay-center\": a2,\n    \"p-overlay-top\": a3,\n    \"p-overlay-top-start\": a4,\n    \"p-overlay-top-end\": a5,\n    \"p-overlay-bottom\": a6,\n    \"p-overlay-bottom-start\": a7,\n    \"p-overlay-bottom-end\": a8,\n    \"p-overlay-left\": a9,\n    \"p-overlay-left-start\": a10,\n    \"p-overlay-left-end\": a11,\n    \"p-overlay-right\": a12,\n    \"p-overlay-right-start\": a13,\n    \"p-overlay-right-end\": a14\n  };\n};\n\nfunction Overlay_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵlistener(\"click\", function Overlay_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.onOverlayClick($event));\n    });\n    i0.ɵɵtemplate(2, Overlay_div_0_div_2_Template, 4, 17, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.styleClass);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.style)(\"ngClass\", i0.ɵɵpureFunctionV(5, _c6, [ctx_r0.modal, ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"center\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"top\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"top-start\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"top-end\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"bottom\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"bottom-start\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"bottom-end\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"left\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"left-start\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"left-end\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"right\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"right-start\", ctx_r0.modal && ctx_r0.overlayResponsiveDirection === \"right-end\"]));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.visible);\n  }\n}\n\nconst _c7 = [\"*\"];\nconst OVERLAY_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => Overlay),\n  multi: true\n};\nconst showOverlayContentAnimation = animation([style({\n  transform: '{{transform}}',\n  opacity: 0\n}), animate('{{showTransitionParams}}')]);\nconst hideOverlayContentAnimation = animation([animate('{{hideTransitionParams}}', style({\n  transform: '{{transform}}',\n  opacity: 0\n}))]);\nlet Overlay = /*#__PURE__*/(() => {\n  class Overlay {\n    constructor(document, el, renderer, config, overlayService, cd) {\n      this.document = document;\n      this.el = el;\n      this.renderer = renderer;\n      this.config = config;\n      this.overlayService = overlayService;\n      this.cd = cd;\n      this.visibleChange = new EventEmitter();\n      this.onBeforeShow = new EventEmitter();\n      this.onShow = new EventEmitter();\n      this.onBeforeHide = new EventEmitter();\n      this.onHide = new EventEmitter();\n      this.onAnimationStart = new EventEmitter();\n      this.onAnimationDone = new EventEmitter();\n      this._visible = false;\n      this.modalVisible = false;\n      this.isOverlayClicked = false;\n      this.isOverlayContentClicked = false;\n      this.transformOptions = {\n        default: 'scaleY(0.8)',\n        center: 'scale(0.7)',\n        top: 'translate3d(0px, -100%, 0px)',\n        'top-start': 'translate3d(0px, -100%, 0px)',\n        'top-end': 'translate3d(0px, -100%, 0px)',\n        bottom: 'translate3d(0px, 100%, 0px)',\n        'bottom-start': 'translate3d(0px, 100%, 0px)',\n        'bottom-end': 'translate3d(0px, 100%, 0px)',\n        left: 'translate3d(-100%, 0px, 0px)',\n        'left-start': 'translate3d(-100%, 0px, 0px)',\n        'left-end': 'translate3d(-100%, 0px, 0px)',\n        right: 'translate3d(100%, 0px, 0px)',\n        'right-start': 'translate3d(100%, 0px, 0px)',\n        'right-end': 'translate3d(100%, 0px, 0px)'\n      };\n      this.window = this.document.defaultView;\n    }\n\n    get visible() {\n      return this._visible;\n    }\n\n    set visible(value) {\n      this._visible = value;\n\n      if (this._visible && !this.modalVisible) {\n        this.modalVisible = true;\n      }\n    }\n\n    get mode() {\n      var _a;\n\n      return this._mode || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.mode);\n    }\n\n    set mode(value) {\n      this._mode = value;\n    }\n\n    get style() {\n      var _a, _b;\n\n      return ObjectUtils.merge(this._style, this.modal ? (_a = this.overlayResponsiveOptions) === null || _a === void 0 ? void 0 : _a.style : (_b = this.overlayOptions) === null || _b === void 0 ? void 0 : _b.style);\n    }\n\n    set style(value) {\n      this._style = value;\n    }\n\n    get styleClass() {\n      var _a, _b;\n\n      return ObjectUtils.merge(this._styleClass, this.modal ? (_a = this.overlayResponsiveOptions) === null || _a === void 0 ? void 0 : _a.styleClass : (_b = this.overlayOptions) === null || _b === void 0 ? void 0 : _b.styleClass);\n    }\n\n    set styleClass(value) {\n      this._styleClass = value;\n    }\n\n    get contentStyle() {\n      var _a, _b;\n\n      return ObjectUtils.merge(this._contentStyle, this.modal ? (_a = this.overlayResponsiveOptions) === null || _a === void 0 ? void 0 : _a.contentStyle : (_b = this.overlayOptions) === null || _b === void 0 ? void 0 : _b.contentStyle);\n    }\n\n    set contentStyle(value) {\n      this._contentStyle = value;\n    }\n\n    get contentStyleClass() {\n      var _a, _b;\n\n      return ObjectUtils.merge(this._contentStyleClass, this.modal ? (_a = this.overlayResponsiveOptions) === null || _a === void 0 ? void 0 : _a.contentStyleClass : (_b = this.overlayOptions) === null || _b === void 0 ? void 0 : _b.contentStyleClass);\n    }\n\n    set contentStyleClass(value) {\n      this._contentStyleClass = value;\n    }\n\n    get target() {\n      var _a;\n\n      const value = this._target || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.target);\n      return value === undefined ? '@prev' : value;\n    }\n\n    set target(value) {\n      this._target = value;\n    }\n\n    get appendTo() {\n      var _a;\n\n      return this._appendTo || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.appendTo);\n    }\n\n    set appendTo(value) {\n      this._appendTo = value;\n    }\n\n    get autoZIndex() {\n      var _a;\n\n      const value = this._autoZIndex || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.autoZIndex);\n      return value === undefined ? true : value;\n    }\n\n    set autoZIndex(value) {\n      this._autoZIndex = value;\n    }\n\n    get baseZIndex() {\n      var _a;\n\n      const value = this._baseZIndex || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.baseZIndex);\n      return value === undefined ? 0 : value;\n    }\n\n    set baseZIndex(value) {\n      this._baseZIndex = value;\n    }\n\n    get showTransitionOptions() {\n      var _a;\n\n      const value = this._showTransitionOptions || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.showTransitionOptions);\n      return value === undefined ? '.12s cubic-bezier(0, 0, 0.2, 1)' : value;\n    }\n\n    set showTransitionOptions(value) {\n      this._showTransitionOptions = value;\n    }\n\n    get hideTransitionOptions() {\n      var _a;\n\n      const value = this._hideTransitionOptions || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.hideTransitionOptions);\n      return value === undefined ? '.1s linear' : value;\n    }\n\n    set hideTransitionOptions(value) {\n      this._hideTransitionOptions = value;\n    }\n\n    get listener() {\n      var _a;\n\n      return this._listener || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.listener);\n    }\n\n    set listener(value) {\n      this._listener = value;\n    }\n\n    get responsive() {\n      var _a;\n\n      return this._responsive || ((_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.responsive);\n    }\n\n    set responsive(val) {\n      this._responsive = val;\n    }\n\n    get options() {\n      return this._options;\n    }\n\n    set options(val) {\n      this._options = val;\n    }\n\n    get modal() {\n      var _a, _b;\n\n      return this.mode === 'modal' || this.overlayResponsiveOptions && ((_a = this.window) === null || _a === void 0 ? void 0 : _a.matchMedia(((_b = this.overlayResponsiveOptions.media) === null || _b === void 0 ? void 0 : _b.replace('@media', '')) || `(max-width: ${this.overlayResponsiveOptions.breakpoint})`).matches);\n    }\n\n    get overlayMode() {\n      return this.mode || (this.modal ? 'modal' : 'overlay');\n    }\n\n    get overlayOptions() {\n      var _a;\n\n      return Object.assign(Object.assign({}, (_a = this.config) === null || _a === void 0 ? void 0 : _a.overlayOptions), this.options); // TODO: Improve performance\n    }\n\n    get overlayResponsiveOptions() {\n      var _a;\n\n      return Object.assign(Object.assign({}, (_a = this.overlayOptions) === null || _a === void 0 ? void 0 : _a.responsive), this.responsive); // TODO: Improve performance\n    }\n\n    get overlayResponsiveDirection() {\n      var _a;\n\n      return ((_a = this.overlayResponsiveOptions) === null || _a === void 0 ? void 0 : _a.direction) || 'center';\n    }\n\n    get overlayEl() {\n      var _a;\n\n      return (_a = this.overlayViewChild) === null || _a === void 0 ? void 0 : _a.nativeElement;\n    }\n\n    get contentEl() {\n      var _a;\n\n      return (_a = this.contentViewChild) === null || _a === void 0 ? void 0 : _a.nativeElement;\n    }\n\n    get targetEl() {\n      var _a;\n\n      return DomHandler.getTargetElement(this.target, (_a = this.el) === null || _a === void 0 ? void 0 : _a.nativeElement);\n    }\n\n    ngAfterContentInit() {\n      var _a;\n\n      (_a = this.templates) === null || _a === void 0 ? void 0 : _a.forEach(item => {\n        switch (item.getType()) {\n          case 'content':\n            this.contentTemplate = item.template;\n            break;\n          // TODO: new template types may be added.\n\n          default:\n            this.contentTemplate = item.template;\n            break;\n        }\n      });\n    }\n\n    show(overlay, isFocus = false) {\n      var _a;\n\n      this.onVisibleChange(true);\n      this.handleEvents('onShow', {\n        overlay: overlay || this.overlayEl,\n        target: this.targetEl,\n        mode: this.overlayMode\n      });\n      isFocus && DomHandler.focus(this.targetEl);\n      this.modal && DomHandler.addClass((_a = this.document) === null || _a === void 0 ? void 0 : _a.body, 'p-overflow-hidden');\n    }\n\n    hide(overlay, isFocus = false) {\n      var _a;\n\n      this.onVisibleChange(false);\n      this.handleEvents('onHide', {\n        overlay: overlay || this.overlayEl,\n        target: this.targetEl,\n        mode: this.overlayMode\n      });\n      isFocus && DomHandler.focus(this.targetEl);\n      this.modal && DomHandler.removeClass((_a = this.document) === null || _a === void 0 ? void 0 : _a.body, 'p-overflow-hidden');\n    }\n\n    alignOverlay() {\n      !this.modal && DomHandler.alignOverlay(this.overlayEl, this.targetEl, this.appendTo);\n    }\n\n    onVisibleChange(visible) {\n      this._visible = visible;\n      this.visibleChange.emit(visible);\n    }\n\n    onOverlayClick() {\n      this.isOverlayClicked = true;\n    }\n\n    onOverlayContentClick(event) {\n      this.overlayService.add({\n        originalEvent: event,\n        target: this.targetEl\n      });\n      this.isOverlayContentClicked = true;\n    }\n\n    onOverlayContentAnimationStart(event) {\n      var _a;\n\n      switch (event.toState) {\n        case 'visible':\n          this.handleEvents('onBeforeShow', {\n            overlay: this.overlayEl,\n            target: this.targetEl,\n            mode: this.overlayMode\n          });\n\n          if (this.autoZIndex) {\n            ZIndexUtils.set(this.overlayMode, this.overlayEl, this.baseZIndex + ((_a = this.config) === null || _a === void 0 ? void 0 : _a.zIndex[this.overlayMode]));\n          }\n\n          DomHandler.appendOverlay(this.overlayEl, this.appendTo === 'body' ? this.document.body : this.appendTo, this.appendTo);\n          this.alignOverlay();\n          break;\n\n        case 'void':\n          this.handleEvents('onBeforeHide', {\n            overlay: this.overlayEl,\n            target: this.targetEl,\n            mode: this.overlayMode\n          });\n          this.modal && DomHandler.addClass(this.overlayEl, 'p-component-overlay-leave');\n          break;\n      }\n\n      this.handleEvents('onAnimationStart', event);\n    }\n\n    onOverlayContentAnimationDone(event) {\n      const container = this.overlayEl || event.element.parentElement;\n\n      switch (event.toState) {\n        case 'visible':\n          this.show(container, true);\n          this.bindListeners();\n          break;\n\n        case 'void':\n          this.hide(container, true);\n          this.unbindListeners();\n          DomHandler.appendOverlay(this.overlayEl, this.targetEl, this.appendTo);\n          ZIndexUtils.clear(container);\n          this.modalVisible = false;\n          break;\n      }\n\n      this.handleEvents('onAnimationDone', event);\n    }\n\n    handleEvents(name, params) {\n      var _a, _b, _c;\n\n      this[name].emit(params);\n      this.options && this.options[name] && this.options[name](params);\n      ((_a = this.config) === null || _a === void 0 ? void 0 : _a.overlayOptions) && ((_b = this.config) === null || _b === void 0 ? void 0 : _b.overlayOptions[name]) && ((_c = this.config) === null || _c === void 0 ? void 0 : _c.overlayOptions[name](params));\n    }\n\n    bindListeners() {\n      this.bindScrollListener();\n      this.bindDocumentClickListener();\n      this.bindDocumentResizeListener();\n    }\n\n    unbindListeners() {\n      this.unbindScrollListener();\n      this.unbindDocumentClickListener();\n      this.unbindDocumentResizeListener();\n    }\n\n    bindScrollListener() {\n      if (!this.scrollHandler) {\n        this.scrollHandler = new ConnectedOverlayScrollHandler(this.targetEl, event => {\n          const valid = this.listener ? this.listener(event, {\n            type: 'scroll',\n            mode: this.overlayMode,\n            valid: true\n          }) : true;\n          valid && this.hide(event, true);\n        });\n      }\n\n      this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n      if (this.scrollHandler) {\n        this.scrollHandler.unbindScrollListener();\n      }\n    }\n\n    bindDocumentClickListener() {\n      if (!this.documentClickListener) {\n        this.documentClickListener = this.renderer.listen(this.document, 'click', event => {\n          const isTargetClicked = this.targetEl && (this.targetEl.isSameNode(event.target) || !this.isOverlayClicked && this.targetEl.contains(event.target));\n          const isOutsideClicked = !isTargetClicked && !this.isOverlayContentClicked;\n          const valid = this.listener ? this.listener(event, {\n            type: 'outside',\n            mode: this.overlayMode,\n            valid: event.which !== 3 && isOutsideClicked\n          }) : isOutsideClicked;\n          valid && this.hide(event);\n          this.isOverlayClicked = this.isOverlayContentClicked = false;\n        });\n      }\n    }\n\n    unbindDocumentClickListener() {\n      if (this.documentClickListener) {\n        this.documentClickListener();\n        this.documentClickListener = null;\n      }\n    }\n\n    bindDocumentResizeListener() {\n      if (!this.documentResizeListener) {\n        this.documentResizeListener = this.renderer.listen('window', 'resize', event => {\n          const valid = this.listener ? this.listener(event, {\n            type: 'resize',\n            mode: this.overlayMode,\n            valid: !DomHandler.isTouchDevice()\n          }) : !DomHandler.isTouchDevice();\n          valid && this.hide(event, true);\n        });\n      }\n    }\n\n    unbindDocumentResizeListener() {\n      if (this.documentResizeListener) {\n        this.documentResizeListener();\n        this.documentResizeListener = null;\n      }\n    }\n\n    ngOnDestroy() {\n      this.hide(this.overlayEl, true);\n\n      if (this.overlayEl) {\n        DomHandler.appendOverlay(this.overlayEl, this.targetEl, this.appendTo);\n        ZIndexUtils.clear(this.overlayEl);\n      }\n\n      if (this.scrollHandler) {\n        this.scrollHandler.destroy();\n        this.scrollHandler = null;\n      }\n\n      this.unbindListeners();\n    }\n\n  }\n\n  Overlay.ɵfac = function Overlay_Factory(t) {\n    return new (t || Overlay)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PrimeNGConfig), i0.ɵɵdirectiveInject(i1.OverlayService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  Overlay.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: Overlay,\n    selectors: [[\"p-overlay\"]],\n    contentQueries: function Overlay_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Overlay_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.overlayViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentViewChild = _t.first);\n      }\n    },\n    hostAttrs: [1, \"p-element\"],\n    inputs: {\n      visible: \"visible\",\n      mode: \"mode\",\n      style: \"style\",\n      styleClass: \"styleClass\",\n      contentStyle: \"contentStyle\",\n      contentStyleClass: \"contentStyleClass\",\n      target: \"target\",\n      appendTo: \"appendTo\",\n      autoZIndex: \"autoZIndex\",\n      baseZIndex: \"baseZIndex\",\n      showTransitionOptions: \"showTransitionOptions\",\n      hideTransitionOptions: \"hideTransitionOptions\",\n      listener: \"listener\",\n      responsive: \"responsive\",\n      options: \"options\"\n    },\n    outputs: {\n      visibleChange: \"visibleChange\",\n      onBeforeShow: \"onBeforeShow\",\n      onShow: \"onShow\",\n      onBeforeHide: \"onBeforeHide\",\n      onHide: \"onHide\",\n      onAnimationStart: \"onAnimationStart\",\n      onAnimationDone: \"onAnimationDone\"\n    },\n    features: [i0.ɵɵProvidersFeature([OVERLAY_VALUE_ACCESSOR])],\n    ngContentSelectors: _c7,\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngStyle\", \"class\", \"ngClass\", \"click\", 4, \"ngIf\"], [3, \"ngStyle\", \"ngClass\", \"click\"], [\"overlay\", \"\"], [\"content\", \"\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function Overlay_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, Overlay_div_0_Template, 3, 20, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.modalVisible);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle],\n    styles: [\".p-overlay{position:absolute;top:0;left:0}.p-overlay-modal{display:flex;align-items:center;justify-content:center;position:fixed;top:0;left:0;width:100%;height:100%}.p-overlay-content{transform-origin:inherit}.p-overlay-modal>.p-overlay-content{z-index:1;width:90%}.p-overlay-top{align-items:flex-start}.p-overlay-top-start{align-items:flex-start;justify-content:flex-start}.p-overlay-top-end{align-items:flex-start;justify-content:flex-end}.p-overlay-bottom{align-items:flex-end}.p-overlay-bottom-start{align-items:flex-end;justify-content:flex-start}.p-overlay-bottom-end{align-items:flex-end;justify-content:flex-end}.p-overlay-left{justify-content:flex-start}.p-overlay-left-start{justify-content:flex-start;align-items:flex-start}.p-overlay-left-end{justify-content:flex-start;align-items:flex-end}.p-overlay-right{justify-content:flex-end}.p-overlay-right-start{justify-content:flex-end;align-items:flex-start}.p-overlay-right-end{justify-content:flex-end;align-items:flex-end}\\n\"],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('overlayContentAnimation', [transition(':enter', [useAnimation(showOverlayContentAnimation)]), transition(':leave', [useAnimation(hideOverlayContentAnimation)])])]\n    },\n    changeDetection: 0\n  });\n  return Overlay;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet OverlayModule = /*#__PURE__*/(() => {\n  class OverlayModule {}\n\n  OverlayModule.ɵfac = function OverlayModule_Factory(t) {\n    return new (t || OverlayModule)();\n  };\n\n  OverlayModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: OverlayModule\n  });\n  OverlayModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule, SharedModule, SharedModule]\n  });\n  return OverlayModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { OVERLAY_VALUE_ACCESSOR, Overlay, OverlayModule }; //# sourceMappingURL=primeng-overlay.mjs.map","map":null,"metadata":{},"sourceType":"module"}